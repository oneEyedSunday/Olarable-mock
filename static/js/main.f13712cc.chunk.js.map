{"version":3,"sources":["components/DocSection.tsx","store/index.ts","components/InputField.tsx","components/TravelerInfo.tsx","components/Disclaimer.tsx","components/AgencyDetails.tsx","components/FlightInfo.tsx","components/print-styles.tsx","containers/form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DocSection","styled","section","attrs","props","className","InputContext","React","createContext","InputField","useState","value","setValue","showInput","useContext","fieldName","type","onChange","evt","target","style","wordBreak","ResponsiveWrapper","div","TravelerInfo","Disclaimer","Details","FlightInfo","flightName","setFlightName","Date","toISOString","flightDate","setFlightDate","placeholder","width","moment","format","HiddenOnPrint","ShowInputProvider","Provider","ReceiptForm","showingInput","setShowingInput","window","onafterprint","onClick","Promise","resolve","then","print","location","reload","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f13712cc.chunk.js","sourcesContent":["import styled from 'styled-components';\n\n\nexport const DocSection = styled.section.attrs(props => ({\n  className: 'p-4 mb-3'\n}))\n`\n  border: 2px solid black\n`;\n","import React from 'react';\n\nexport const InputContext = React.createContext(false);\n\n","import React, { useContext, useState } from 'react';\nimport { InputContext } from '../store';\n\n\ninterface PropsInterface {\n    fieldName: string;\n}\n\nexport const InputField = (props: PropsInterface): JSX.Element => {\n    const [value, setValue] = useState('');\n    const showInput = useContext(InputContext);\n    return (\n        <div className=\"d-flex flex-column\">\n            <span className=\"text-left\">{props.fieldName}:</span>\n            <input type=\"text\" \n            className={'form-control ' + (showInput ? ' ' : ' d-none ')}\n            value={value}\n            onChange={evt => setValue(evt.target.value)} />\n            {\n                !showInput && \n                <span className=\"lead\" style={{wordBreak: 'break-all'}}>\n                    { value }\n                </span>\n            }\n            \n        </div>\n    );\n}","import React from 'react';\nimport { DocSection, InputField } from '../components';\nimport styled from 'styled-components';\n\nconst ResponsiveWrapper = styled.div`\n    display: flex;\n\n    & > * {\n        max-width: 25%;\n    }\n\n    @media (max-width: 700px) {\n        flex-direction: column;\n\n        & > * {\n            max-width: 100%;\n        }\n       \n    }\n`;\n\nexport const TravelerInfo = (): JSX.Element => {\n    return (\n      <DocSection>\n        <div className=\"d-flex flex-column\">\n          <div className=\"text-left mb-3\">\n            <span>Traveler</span>\n          </div>\n          <div className=\"d-flex flex-column\">\n            <ResponsiveWrapper className=\"w-100 justify-content-between\">\n              <InputField  fieldName=\"Passenger Name\"  />\n              <InputField  fieldName=\"Ticket Number\"  />\n              <InputField  fieldName=\"Reservation Number\"  />\n              <InputField  fieldName=\"Ticket Issue Name\"  />\n            </ResponsiveWrapper>\n          </div>\n        </div>\n      </DocSection>\n    );\n};\n\n","import React from 'react';\nimport { DocSection } from '../components';\n\n\nexport const Disclaimer = (): JSX.Element => {\n    return (\n        <DocSection>\n            <div className=\"d-flex flex-column\">\n                <div className=\"text-left\">\n                    <span>Notes</span>\n                </div>\n                <div className=\"text-left mb-3\">\n                    <span>\n                    Baggage discounts may apply based on frequent flyer status/online checkin/form of payment/military/etc.\n                    </span>\n                </div>\n                <div className=\"text-left\">\n                    <span className=\"text-danger\">\n                    IMPORTANT INFORMATION FOR TRAVELERS WITH ELECTRONIC TICKETS ‚Äê PLEASE READ:\n                    </span>\n                </div>\n                <div className=\"text-left\">\n                    <span className=\"\">\n                    Carriage and other services provided by the carrier are subject to conditions of carriage, which are hereby incorporated by reference. These conditions may be obtained from the issuing carrier. Passengers on a journey involving an ultimate destination or a stop in a country other than the country of departure are advised that international treaties known as the Montreal Convention, or its predecessor, the Warsaw Convention, including its amendments (the Warsaw Convention System), may apply to the entire journey, including any portion thereof within a country. For such passengers, the applicable treaty, including special contracts of carriage embodied in any applicable tariffs, governs and may limit the liability of the carrier. The carriage of certain hazardous materials, like aerosols, fireworks, and flammable liquids, aboard the aircraft is forbidden. If you do not understand these restrictions, further information may be obtained from your airline.\n                    </span>\n                </div>\n            </div>\n        </DocSection>\n    );\n}\n","import React from 'react';\nimport { DocSection } from '../components';\n\n\nexport const Details = (): JSX.Element => {\n    return (\n        <DocSection>\n            <div className=\"d-flex flex-column\">\n                <div className=\"text-left mb-3\">\n                    <span>Agency Details</span>\n                </div>\n                <div className=\"text-left mb-3\">\n                    <span className=\"f-5\">\n                    Agency Information:\n                    </span>\n                </div>\n                <div className=\"text-left\">\n                    <span className=\"text-italic text-uppercase d-block\">\n                    OLARABLE TRAVELS AND TOURS LTD\n                    </span>\n                    <span className=\"text-italic d-block\">\n                    Plot 500b, 111 road,\n                    </span>\n                    <span className=\"text-italic d-block\">\n                    Gwarinpa 3rd avenue,\n                    </span>\n                    <span className=\"text-italic d-block\">\n                    Abuja, Nigeria.\n                    </span>\n\n                    <span className=\"text-italic d-block\">\n                    Telephone: +2348038634184, +2348130233012\n                    </span>\n                </div>\n            </div>\n        </DocSection>\n    );\n}\n","import React, { useContext, useState } from 'react';\nimport { DocSection } from '../components';\nimport styled from 'styled-components';\nimport { InputContext } from '../store';\nimport moment from 'moment';\n\n\nconst ResponsiveWrapper = styled.div`\n    display: flex;\n\n    & > * {\n      max-width: 33.3%;\n      margin: 0 0.4em;\n    }\n\n    @media (max-width: 700px) {\n        flex-direction: column;\n\n        & > * {\n            max-width: 100%;\n            margin: 0.5em;\n        }\n       \n    }\n`;\n\nexport const FlightInfo = (): JSX.Element => {\n  const showInput = useContext(InputContext);\n  const [flightName, setFlightName] = useState('');\n  const [flightDate, setFlightDate] = useState(new Date().toISOString());\n\n  return (\n    <DocSection>\n      <div className=\"d-flex flex-column\">\n        <ResponsiveWrapper>\n          <div className=\"w-100\">\n           <span className=\"f-5\">Flight</span>\n          </div>\n          {\n            showInput ?\n            <>\n              <input \n              type=\"text\"\n              placeholder=\"ex: BA 082 - BRITISH AIRWAYS\"\n              onChange={evt => setFlightName(evt.target.value)}\n              className=\"form-control\"/>\n\n              <input\n              type=\"date\"\n              onChange={evt => setFlightDate(evt.target.value)}\n              className=\"form-control\"\n              />\n            </>\n            \n            : \n\n            <>\n              <span className=\"lead\" \n              style={ {wordBreak: 'break-all', width: '100%'} }>{ flightName }</span>\n\n              <span className=\"lead text-right\"\n              style={{ wordBreak: 'break-all', width: '100%' }}\n              >\n                { moment(flightDate).format('dddd D MMMM YYYY') }\n              </span>\n            </>\n          }\n        </ResponsiveWrapper>\n      </div>\n    </DocSection>\n  )\n};\n","import styled from 'styled-components';\n\n\nexport const HiddenOnPrint = styled.div`\n    @media print {\n       && {\n        display: none !important;\n       }  \n    }\n   \n`\n","import React, { useState }  from 'react';\nimport { Disclaimer, TravelerInfo, AgencyDetails, FlightInfo, HiddenOnPrint } from '../components';\nimport { InputContext } from '../store';\n\n\nconst { Provider: ShowInputProvider } = InputContext;\n\n\nexport const ReceiptForm = (): JSX.Element => {\n  const [showingInput, setShowingInput] = useState(true);\n  window.onafterprint = () => {\n    setShowingInput(true);\n  };\n  function handleSubmission() {\n    setShowingInput(false);\n    Promise.resolve()\n      .then(window.print)\n  }\n\n  function resetForm() {\n    window.location.reload();\n  }\n    return (\n      <ShowInputProvider value={showingInput}>\n        <HiddenOnPrint className=\"d-flex justufy-center my-2\">\n          <button \n          className=\"btn btn-primary\" \n          onClick={handleSubmission}>\n            Print Receipt\n          </button>\n          <button \n          className=\"ml-2 btn btn-danger\" \n          onClick={resetForm}>\n            Reset Form\n          </button>\n        </HiddenOnPrint>\n        <TravelerInfo />\n        <AgencyDetails />\n        <FlightInfo />\n        <Disclaimer />\n      </ShowInputProvider>\n    );\n};\n\n","import React from 'react';\nimport './App.css';\nimport { ReceiptForm } from './containers';\n\nconst App = () => {\n  return (\n    <div className=\"container-fluid\">\n      <ReceiptForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}